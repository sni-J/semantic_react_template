{"version":3,"sources":["views/logo.svg","views/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","leftMenu","App","state","activeItem","color","login","handleItemClick","e","_ref","name","_this","setState","_this2","this","_this$state","react_default","a","createElement","className","Container","Menu","secondary","inverted","position","Item","as","header","href","src","logo","alt","map","menu","key","active","onClick","Input","transparent","icon","placeholder","fluid","Card","Group","Content","Header","Meta","Divider","Description","extra","meta","description","Tab","Pane","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f54de302.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport {\n  Input,\n  Menu,\n  Container,\n  Card,\n  Divider,\n  Tab,\n} from 'semantic-ui-react'\nimport logo from './logo.svg'\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css'\n\nconst leftMenu = ['home', 'messages', 'friends']\n\nexport default class App extends Component {\n  state = {\n    activeItem: 'home',\n    color: \"teal\",\n    login: \"logout\"\n  }\n\n  handleItemClick = (e, { name }) => {\n    this.setState({ activeItem: name })\n  }\n\n  render() {\n    const { activeItem, color, login } = this.state\n    const NavBarMenu = () => (\n      <Menu secondary inverted>\n        <Menu.Menu position=\"left\">\n          <Menu.Item\n            as='a'\n            header\n            href=\"\"\n          >\n            <img src={logo} alt=\"logo\"/>\n          </Menu.Item>\n          {\n            leftMenu.map(menu => {\n              return (\n                <Menu.Item\n                  key={\"navbar_\"+menu}\n                  name={menu}\n                  active={activeItem === menu}\n                  onClick={this.handleItemClick}\n                  color={color}\n                />\n              )\n            })\n          }\n        </Menu.Menu>\n        <Menu.Menu position='right'>\n          <Menu.Item>\n            <Input inverted transparent icon=\"search\" placeholder='Search...' />\n          </Menu.Item>\n          <Menu.Item\n            name={login}\n            onClick={this.handleItemClick}\n          />\n        </Menu.Menu>\n      </Menu>\n    )\n\n    const TabContent = () => {\n      switch (activeItem) {\n        case 'home':\n          return (\n            <Card.Group>\n              <Card>\n                <Card.Content>\n                  <Card.Header>Home</Card.Header>\n                  <Card.Meta>Meta</Card.Meta>\n                  <Divider />\n                  <Card.Description>\n                    <p>Okay, This is Home</p>\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                  Extra Area <br/>\n                  Nicely divided\n                </Card.Content>\n              </Card>\n              <Card\n                header=\"Home\"\n                meta=\"Meta\"\n                description=\"Okay, This is home\"\n                extra=\"Extra Area Nicely Divided\"\n              />\n            </Card.Group>\n          )\n        case 'messages':\n          return (\n            <Tab.Pane fluid>\n              <p>Message Here</p>\n            </Tab.Pane>\n          )\n        case 'friends':\n          return (<p>friends Here</p>)\n        default:\n          return (<p>Not Found, But Not 404. Maybe under construction.</p>)\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <Container>\n            <NavBarMenu>\n            </NavBarMenu>\n          </Container>\n        </div>\n        <div className=\"App-body\">\n          <Container fluid>\n            <Container>\n              <TabContent>\n              </TabContent>\n            </Container>\n          </Container>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}