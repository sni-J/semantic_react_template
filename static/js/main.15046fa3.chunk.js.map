{"version":3,"sources":["components/Navbar/Navbar.js","components/TabContent/TabContent.js","components/App.js","serviceWorker.js","index.js","components/logo.svg"],"names":["menuItem","Navbar","state","visible","window","innerWidth","Responsive","onlyTablet","minWidth","handleItemClick","e","_ref","name","_this","setState","activeItem","props","mobileMenuSwitch","_this2","this","_this$props","color","login","react_default","a","createElement","Container","Object","assign","onlyMobile","as","Menu","secondary","inverted","className","position","Item","header","href","src","logo","alt","Checkbox","label","Icon","onClick","fitted","size","stackable","map","menu","key","active","Input","transparent","icon","placeholder","Component","TabContent","Card","Group","Content","Header","Meta","Divider","Description","extra","meta","description","Tab","Pane","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","Navbar_Navbar","TabContent_TabContent","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.15046fa3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Menu,\r\n  Container,\r\n  Responsive,\r\n  Icon,\r\n  Checkbox,\r\n} from 'semantic-ui-react'\r\nimport logo from '../logo.svg'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nconst menuItem = ['home', 'messages', 'friends']\r\n\r\nexport default class Navbar extends Component {\r\n  state = {\r\n    visible: window.innerWidth >= Responsive.onlyTablet.minWidth\r\n  }\r\n\r\n  handleItemClick = (e, {name}) => {\r\n    this.setState(()=>({activeItem: name}))\r\n    this.props.handleItemClick(e, {name})\r\n  }\r\n\r\n  mobileMenuSwitch = (e) => {\r\n    this.setState(state => ({ visible: !state.visible }))\r\n  }\r\n\r\n  render(){\r\n\r\n    const { visible } = this.state\r\n    const { activeItem, color, login } = this.props\r\n\r\n    return (\r\n      <Container>\r\n        <Responsive\r\n          {...Responsive.onlyMobile}\r\n          as={Menu}\r\n          secondary\r\n          inverted\r\n          className='navbar'\r\n        >\r\n          <Menu.Menu position=\"left\">\r\n            <Menu.Item\r\n              as='a'\r\n              header\r\n              href=\"\"\r\n            >\r\n              <img src={logo} alt=\"logo\"/>\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n          <Menu.Menu position=\"right\">\r\n            <Menu.Item header>\r\n              <Checkbox\r\n                label={\r\n                  <div className='menuIconDiv'>\r\n                  <Icon\r\n                    name='bars'\r\n                    onClick={this.mobileMenuSwitch}\r\n                    fitted\r\n                    size='large'\r\n                    className={\r\n                      'menuIcon' +\r\n                      ((!visible && ' visible') || '')\r\n                    }\r\n                  />\r\n                  <Icon\r\n                    name='x'\r\n                    onClick={this.mobileMenuSwitch}\r\n                    fitted\r\n                    size='large'\r\n                    className={\r\n                      'menuIcon' +\r\n                      ((visible && ' visible') || '')\r\n                    }\r\n                  />\r\n                  </div>\r\n                }\r\n              />\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n        </Responsive>\r\n        <div className={\r\n          'navItem'+((visible && ' mobile_open')||'')\r\n        }>\r\n          <Menu secondary inverted stackable>\r\n            <Responsive\r\n              minWidth={Responsive.onlyTablet.minWidth}\r\n              as={Menu.Menu}\r\n              position=\"left\"\r\n            >\r\n              <Menu.Item\r\n                as='a'\r\n                header\r\n                href=\"\"\r\n              >\r\n                <img src={logo} alt=\"logo\"/>\r\n              </Menu.Item>\r\n            </Responsive>\r\n            <Menu.Menu position=\"left\">\r\n              {\r\n                menuItem.map(menu => {\r\n                  return (\r\n                    <Menu.Item\r\n                      key={\"navbar_\"+menu}\r\n                      name={menu}\r\n                      active={activeItem === menu}\r\n                      onClick={this.handleItemClick}\r\n                      color={color}\r\n                    />\r\n                  )\r\n                })\r\n              }\r\n            </Menu.Menu>\r\n            <Menu.Menu position='right'>\r\n              <Menu.Item>\r\n                <Input inverted transparent icon=\"search\" placeholder='Search...' />\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                name={login}\r\n                onClick={this.handleItemClick}\r\n              />\r\n            </Menu.Menu>\r\n          </Menu>\r\n        </div>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {\r\n  Card,\r\n  Divider,\r\n  Tab,\r\n} from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nexport default class TabContent extends Component {\r\n  render(){\r\n    const { activeItem } = this.props\r\n\r\n    switch (activeItem) {\r\n      case 'home':\r\n        return (\r\n          <Card.Group>\r\n            <Card>\r\n              <Card.Content>\r\n                <Card.Header>Home</Card.Header>\r\n                <Card.Meta>Meta</Card.Meta>\r\n                <Divider />\r\n                <Card.Description>\r\n                  <p>Okay, This is Home</p>\r\n                </Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                Extra Area <br/>\r\n                Nicely divided\r\n              </Card.Content>\r\n            </Card>\r\n            <Card\r\n              header=\"Home\"\r\n              meta=\"Meta\"\r\n              description=\"Okay, This is home\"\r\n              extra=\"Extra Area Nicely Divided\"\r\n            />\r\n          </Card.Group>\r\n        )\r\n      case 'messages':\r\n        return (\r\n          <Tab.Pane>\r\n            <p>Message Here</p>\r\n          </Tab.Pane>\r\n        )\r\n      case 'friends':\r\n        return (<p>friends Here</p>)\r\n      default:\r\n        return (<p>Not Found, But Not 404. Maybe under construction.</p>)\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport { Container } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css'\nimport Navbar from './Navbar/Navbar.js'\nimport TabContent from './TabContent/TabContent.js'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.handleItemClick = this.handleItemClick.bind(this)\n    this.state = {\n      activeItem: 'home',\n      color: 'teal',\n      login: 'login'\n    }\n  }\n\n  handleItemClick = (e, { name }) => {\n    this.setState({ activeItem: name })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <Navbar handleItemClick={this.handleItemClick} {...this.state}>\n          </Navbar>\n        </div>\n        <div className=\"App-body\">\n          <Container>\n            <TabContent {...this.state}>\n            </TabContent>\n          </Container>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}